labels: {}

image:
  repository: rancher/fluentd
  tag: v0.1.11
  pullPolicy: IfNotPresent

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 500Mi
  # requests:
  #   cpu: 100m
  #   memory: 200Mi
env:

command: '["fluentd", "--dry-run", "-c", "/fluentd/etc/config/std/fluent.conf"]'
# command: '["fluentd", "-c", "/fluentd/etc/config/std/fluent.conf"]'

rbac:
  create: true

serviceAccount:
  create: true

# todo
## Specify if a Pod Security Policy for node-exporter must be created
## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
##
podSecurityPolicy:
  enabled: false
  annotations: {}
    ## Specify pod annotations
    ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
    ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
    ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
    ##
    # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
    # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
    # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

livenessProbe:
  enabled: true

annotations: {}

updateStrategy:
  type: RollingUpdate

tolerations:
  - key: "node-role.kubernetes.io/master"
    operator: "Exists"
  - key: "node-role.kubernetes.io/etcd"
    operator: "Exists"
  - key: "node-role.kubernetes.io/controlplane"
    operator: "Exists"

nodeSelector: {}

service:
  type: ClusterIP
  ports:
    - name: metric
      port: 24231
      targetPort: metric

config:
  clusterLoggingSecretName: clusterlogging
  projectLoggingSecretName: projectlogging
  sslConfigSecretName: sslconfig

cluster:
  dockerRoot: /var/lib/docker

configmapReload:
  name: reloader
  image:
    repository: jimmidyson/configmap-reload
    tag: v0.2.2
    pullPolicy: IfNotPresent
  resources: {}

secrets:
  fluent.conf: |-
    @include /fluentd/etc/config/std/system.conf.conf
    @include /fluentd/etc/config/std/custom_cluster.conf
    @include /fluentd/etc/config/std/custom_project.conf
    @include /fluentd/etc/config/std/legacy_custom_cluster.conf
    @include /fluentd/etc/config/std/legacy_custom_project.conf

    @include /fluentd/etc/config/custom/project/*.conf
    @include /fluentd/etc/config/custom/cluster/*.conf

    # @include /fluentd/etc/config/project/*.conf
    # @include /fluentd/etc/config/cluster/*.conf
  system.conf: |-
    <source>
      @type prometheus
      bind 0.0.0.0
      port 24231
      metrics_path /metrics
    </source>

    <source>
      @type prometheus_output_monitor
      interval 10
      <labels>
        pod_name ${hostname}
      </labels>
    </source>

    <system>
      rpc_endpoint 127.0.0.1:24444
    </system>
  custom_cluster.conf: |-
    <source>
      @type tail
      path /var/lib/rancher/log-volumes/*/apache2/*/*
      pos_file /fluentd/log/custom_cluster_apache2_new.log.pos
      tag tmp-cluster-custom.*
      format /^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^ ]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)?$/ 
      time_format %d/%b/%Y:%H:%M:%S %z
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/*/nginx/*/* 
      pos_file /fluentd/log/custom_cluster_nginx_new.log.pos
      tag tmp-cluster-custom.*
      format /^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)") (?<gzip_ratio>[^ ]*)?$/
      time_format %d/%b/%Y:%H:%M:%S %z
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/*/rfc3164/*/*
      pos_file /fluentd/log/custom_cluster_rfc3164_new.log.pos
      tag tmp-cluster-custom.*
      format /^\<(?<pri>[0-9]+)\>(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<message>.*)$/
      time_format "%b %d %H:%M:%S"
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/*/rfc5424/*/*
      pos_file /fluentd/log/custom_cluster_rfc5424_new.log.pos
      tag tmp-cluster-custom.*
      format /\A^\<(?<pri>[0-9]{1,3})\>[1-9]\d{0,2} (?<time>[^ ]+) (?<host>[^ ]+) (?<ident>[^ ]+) (?<pid>[-0-9]+) (?<msgid>[^ ]+) (?<extradata>(\[(.*)\]|[^ ])) (?<message>.+)$\z/
      time_format "%Y-%m-%dT%H:%M:%S.%L%z"
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/*/json/*/*
      pos_file /fluentd/log/custom_cluster_json_new.log.pos
      tag tmp-cluster-custom.*
      format json
    </source>

    <filter tmp-cluster-custom.**>
      @type record_transformer
      enable_ruby true  
      <record>
        tag ${tag}
        cluster_id ${component = tag.match(Regexp.compile('tmp-cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<pod_id>[^_]+)_(?<volume_name>[^_]+)\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])+)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['cluster_id']}
        cluster_name ${component = tag.match(Regexp.compile('tmp-cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<pod_id>[^_]+)_(?<volume_name>[^_]+)\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])+)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['cluster_name']}
        project_id ${component = tag.match(Regexp.compile('tmp-cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<pod_id>[^_]+)_(?<volume_name>[^_]+)\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])+)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['project_id']}
        project_name ${component = tag.match(Regexp.compile('tmp-cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<pod_id>[^_]+)_(?<volume_name>[^_]+)\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])+)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['project_name'].gsub('~', '_')}
        workload_name ${component = tag.match(Regexp.compile('tmp-cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<pod_id>[^_]+)_(?<volume_name>[^_]+)\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])+)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['workload_name']}
        volume_name ${component = tag.match(Regexp.compile('tmp-cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<pod_id>[^_]+)_(?<volume_name>[^_]+)\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])+)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['volume_name']}
        filename ${component = tag.match(Regexp.compile('tmp-cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<pod_id>[^_]+)_(?<volume_name>[^_]+)\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])+)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['filename']}
        format ${component = tag.match(Regexp.compile('tmp-cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<pod_id>[^_]+)_(?<volume_name>[^_]+)\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])+)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['format']}
      </record>
    </filter>

    <match tmp-cluster-custom.**>
      @type rewrite_tag_filter
      <rule>
        key     tag
        pattern tmp-cluster-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)
        tag     tmp1.cluster-custom.$10_$6_$10_$11
      </rule>
    </match>

    <filter tmp1.cluster-custom.**>
      @type kubernetes_metadata 
      tag_to_kubernetes_name_regexp tmp1\.cluster-custom\.(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?<namespace>[^_]+)_(?<docker_id>.+)_(?<container_name>.+)$
    </filter>

    <match tmp1.cluster-custom.**>
      @type rewrite_tag_filter
      remove_tag_prefix tmp1
      <rule>
        key     tag
        pattern tmp-cluster-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)
        tag     cluster-custom
      </rule>
    </match>

    <filter cluster-custom.**>
      @type record_transformer
      enable_ruby
      remove_keys docker,tag
    </filter>
  custom_project.conf: |-
    <source>
      @type tail
      path /var/lib/rancher/log-volumes/*/apache2/*/*
      pos_file /fluentd/log/custom_project_apache2_new.log.pos
      tag tmp-project-custom.*
      format /^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^ ]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)?$/ 
      time_format %d/%b/%Y:%H:%M:%S %z
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/*/nginx/*/* 
      pos_file /fluentd/log/custom_project_nginx_new.log.pos
      tag tmp-project-custom.*
      format /^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)") (?<gzip_ratio>[^ ]*)?$/
      time_format %d/%b/%Y:%H:%M:%S %z
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/*/rfc3164/*/*
      pos_file /fluentd/log/custom_project_rfc3164_new.log.pos
      tag tmp-project-custom.*
      format /^\<(?<pri>[0-9]+)\>(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<message>.*)$/
      time_format "%b %d %H:%M:%S"
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/*/rfc5424/*/*
      pos_file /fluentd/log/custom_project_rfc5424_new.log.pos
      tag tmp-project-custom.*
      format /\A^\<(?<pri>[0-9]{1,3})\>[1-9]\d{0,2} (?<time>[^ ]+) (?<host>[^ ]+) (?<ident>[^ ]+) (?<pid>[-0-9]+) (?<msgid>[^ ]+) (?<extradata>(\[(.*)\]|[^ ])) (?<message>.+)$\z/
      time_format "%Y-%m-%dT%H:%M:%S.%L%z"
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/*/json/*/*
      pos_file /fluentd/log/custom_project_json_new.log.pos
      tag tmp-project-custom.*
      format json
    </source>

    <filter tmp-project-custom.**>
      @type record_transformer
      enable_ruby true  
      <record>
        tag ${tag}
        cluster_id ${component = tag.match(Regexp.compile('tmp-project-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['cluster_id']}
        cluster_name ${component = tag.match(Regexp.compile('tmp-project-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['cluster_name']}
        project_id ${component = tag.match(Regexp.compile('tmp-project-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['project_id']}
        project_name ${component = tag.match(Regexp.compile('tmp-project-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['project_name'].gsub('~', '_')}
        workload_name ${component = tag.match(Regexp.compile('tmp-project-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['workload_name']}
        volume_name ${component = tag.match(Regexp.compile('tmp-project-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['volume_name']}
        filename ${component = tag.match(Regexp.compile('tmp-project-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['filename']}
        format ${component = tag.match(Regexp.compile('tmp-project-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); component['format']}
        cluster_project ${component = tag.match(Regexp.compile('tmp-project-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)')); "#{component['cluster_id']}:#{component['project_id']}"}
      </record>
    </filter>

    <match tmp-project-custom.**>
      @type rewrite_tag_filter
      <rule>
        key     tag
        pattern tmp-project-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)
        tag     tmp1.tmp2-project-custom.$10_$6_$10_$11
      </rule>
    </match>

    <filter tmp1.tmp2-project-custom.**>
      @type kubernetes_metadata 
      tag_to_kubernetes_name_regexp tmp1\.tmp2-project-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)
    </filter>

    <match tmp1.tmp2-project-custom.**>
      @type rewrite_tag_filter
      remove_tag_prefix tmp1
      <rule>
        key     tag
        pattern tmp-project-custom\.var\.lib\.rancher\.log-volumes\.((?<pod_id>[^_]+)_(?<volume_name>[^_]+))\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])*)_(?<container_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)
        tag     tmp2-project-custom
      </rule>
    </match>

    <match tmp2-project-custom.**>
      @type rewrite_tag_filter
      <rule>
        key cluster_project
        pattern (?<cluster_project>.+\:.+)
        tag project-custom.$1
      </rule>
    </match>

    <filter project-custom.**>
      @type record_transformer
      enable_ruby
      remove_keys docker,tag
    </filter>
  legacy_custom_cluster.conf: |-
    <source>
      @type tail
      path /var/lib/rancher/log-volumes/apache2/*/*
      pos_file /fluentd/log/custom_cluster_apache2.log.pos
      tag tmp2.cluster-custom.*
      format /^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^ ]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)?$/ 
      time_format %d/%b/%Y:%H:%M:%S %z
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/nginx/*/* 
      pos_file /fluentd/log/custom_cluster_nginx.log.pos
      tag tmp2.cluster-custom.*
      format /^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)") (?<gzip_ratio>[^ ]*)?$/
      time_format %d/%b/%Y:%H:%M:%S %z
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/rfc3164/*/*
      pos_file /fluentd/log/custom_cluster_rfc3164.log.pos
      tag tmp2.cluster-custom.*
      format /^\<(?<pri>[0-9]+)\>(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<message>.*)$/
      time_format "%b %d %H:%M:%S"
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/rfc5424/*/*
      pos_file /fluentd/log/custom_cluster_rfc5424.log.pos
      tag tmp2.cluster-custom.*
      format /\A^\<(?<pri>[0-9]{1,3})\>[1-9]\d{0,2} (?<time>[^ ]+) (?<host>[^ ]+) (?<ident>[^ ]+) (?<pid>[-0-9]+) (?<msgid>[^ ]+) (?<extradata>(\[(.*)\]|[^ ])) (?<message>.+)$\z/
      time_format "%Y-%m-%dT%H:%M:%S.%L%z"
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/json/*/*
      pos_file /fluentd/log/custom_cluster_json.log.pos
      tag tmp2.cluster-custom.*
      format json
    </source>

    <filter tmp2.cluster-custom.**>
      @type record_transformer
      enable_ruby true  
      <record>
        tag ${tag}    
        cluster_id ${component = tag.match(Regexp.compile('tmp2\.cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>.+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9]+\.[a-z0-9]+)$')); component['cluster_id']}
        cluster_name ${component = tag.match(Regexp.compile('tmp2\.cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)$')); component['cluster_name']}
        project_id ${component = tag.match(Regexp.compile('tmp2\.cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)$')); component['project_id']}
        project_name ${component = tag.match(Regexp.compile('tmp2\.cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)$')); component['project_name'].gsub('~', '_')}
        workload_name ${component = tag.match(Regexp.compile('tmp2\.cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)$')); component['workload_name']}
        volume_name ${component = tag.match(Regexp.compile('tmp2\.cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)$')); component['volume_name']}
        filename ${component = tag.match(Regexp.compile('tmp2\.cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)$')); component['filename']}
        format ${component = tag.match(Regexp.compile('tmp2\.cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)$')); component['format']}
      </record>
    </filter>

    <match tmp2.cluster-custom.**>
      @type rewrite_tag_filter
      remove_tag_prefix tmp2
      <rule>
        key     tag
        pattern tmp2\.cluster-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)$
        tag     cluster-custom
      </rule>
    </match>
  legacy_custom_project.conf: |-
    <source>
      @type tail
      path /var/lib/rancher/log-volumes/apache2/*/*
      pos_file /fluentd/log/custom_project_apache2.log.pos
      tag tmp2.tmp2-project-custom.*
      format /^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^ ]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)?$/ 
      time_format %d/%b/%Y:%H:%M:%S %z
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/nginx/*/* 
      pos_file /fluentd/log/custom_project_nginx.log.pos
      tag tmp2.tmp2-project-custom.*
      format /^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)") (?<gzip_ratio>[^ ]*)?$/
      time_format %d/%b/%Y:%H:%M:%S %z
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/rfc3164/*/*
      pos_file /fluentd/log/custom_project_rfc3164.log.pos
      tag tmp2.tmp2-project-custom.*
      format /^\<(?<pri>[0-9]+)\>(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<message>.*)$/
      time_format "%b %d %H:%M:%S"
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/rfc5424/*/*
      pos_file /fluentd/log/custom_project_rfc5424.log.pos
      tag tmp2.tmp2-project-custom.*
      format /\A^\<(?<pri>[0-9]{1,3})\>[1-9]\d{0,2} (?<time>[^ ]+) (?<host>[^ ]+) (?<ident>[^ ]+) (?<pid>[-0-9]+) (?<msgid>[^ ]+) (?<extradata>(\[(.*)\]|[^ ])) (?<message>.+)$\z/
      time_format "%Y-%m-%dT%H:%M:%S.%L%z"
    </source>

    <source>
      @type tail
      path /var/lib/rancher/log-volumes/json/*/*
      pos_file /fluentd/log/custom_project_json.log.pos
      tag tmp2.tmp2-project-custom.*
      format json
    </source>

    <filter tmp2.tmp2-project-custom.**>
      @type record_transformer
      enable_ruby true  
      <record>
        tag ${tag}        
        cluster_id ${component = tag.match(Regexp.compile('tmp2\.tmp2-project-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>.+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9]+\.[a-z0-9]+)$')); component['cluster_id']}
        cluster_name ${component = tag.match(Regexp.compile('tmp2\.tmp2-project-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>.+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9]+\.[a-z0-9]+)$')); component['cluster_name']}
        project_id ${component = tag.match(Regexp.compile('tmp2\.tmp2-project-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>.+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9]+\.[a-z0-9]+)$')); component['project_id']}
        project_name ${component = tag.match(Regexp.compile('tmp2\.tmp2-project-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>.+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9]+\.[a-z0-9]+)$')); component['project_name']}
        workload_name ${component = tag.match(Regexp.compile('tmp2\.tmp2-project-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>.+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9]+\.[a-z0-9]+)$')); component['workload_name']}
        volume_name ${component = tag.match(Regexp.compile('tmp2\.tmp2-project-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>.+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9]+\.[a-z0-9]+)$')); component['volume_name']}
        filename ${component = tag.match(Regexp.compile('tmp2\.tmp2-project-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>.+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9]+\.[a-z0-9]+)$')); component['filename']}
        format ${component = tag.match(Regexp.compile('tmp2\.tmp2-project-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>.+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9]+\.[a-z0-9]+)$')); component['format']}
        cluster_project ${component = tag.match(Regexp.compile('tmp2\.tmp2-project-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>.+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9]+\.[a-z0-9]+)$')); "#{component['cluster_id']}:#{component['project_id']}"}
      </record>
    </filter>

    <match tmp2.tmp2-project-custom.**>
      @type rewrite_tag_filter
      remove_tag_prefix tmp2
      <rule>
        key     tag
        pattern tmp2\.tmp2-project-custom\.var\.lib\.rancher\.log-volumes\.(?<format>[a-z0-9]+)\.(?<cluster_id>[^_]+)_(?<cluster_name>[^_]+)_(?<namespace>[^_]+)_(?<project_id>[^_]+)_(?<project_name>[^_]+)_(?<workload_name>[^_]+)_(?<container_name>[^_]+)_(?<volume_name>[^_^.]+)\.(?<filename>[a-z0-9A-Z]+\.[a-zA-Z0-9]+)$
        tag     tmp2-project-custom
      </rule>
    </match>